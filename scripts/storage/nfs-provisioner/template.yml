apiVersion: v1
kind: Template
labels:
  template: nfs-provisioner
message: deploy nfs provisioner
metadata:
  annotations:
    description: This provide nfs-provisioner 
    iconClass: icon-nfs-provisioner
    tags: nfs
  name: nfs-provisioner
objects:
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: nfs-provisioner
- kind: ClusterRole
  apiVersion: rbac.authorization.k8s.io/v1beta1
  metadata:
    name: nfs-provisioner-runner
  rules:
    - apiGroups: [""]
      resources: ["persistentvolumes"]
      verbs: ["get", "list", "watch", "create", "delete"]
    - apiGroups: [""]
      resources: ["persistentvolumeclaims"]
      verbs: ["get", "list", "watch", "update"]
    - apiGroups: ["storage.k8s.io"]
      resources: ["storageclasses"]
      verbs: ["get", "list", "watch"]
    - apiGroups: [""]
      resources: ["events"]
      verbs: ["create", "update", "patch"]
    - apiGroups: [""]
      resources: ["services", "endpoints"]
      verbs: ["get"]
    - apiGroups: ["extensions"]
      resources: ["podsecuritypolicies"]
      resourceNames: ["nfs-provisioner"]
      verbs: ["use"]
- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: ClusterRoleBinding
  metadata:
    name: run-nfs-provisioner
  subjects:
    - kind: ServiceAccount
      name: nfs-provisioner
       # replace with namespace where provisioner is deployed
      namespace: "${NAMESPACE}"
  roleRef:
    kind: ClusterRole
    name: nfs-provisioner-runner
    apiGroup: rbac.authorization.k8s.io
- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: Role
  metadata:
    name: leader-locking-nfs-provisioner
  rules:
    - apiGroups: [""]
      resources: ["endpoints"]
      verbs: ["get", "list", "watch", "create", "update", "patch"]
- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: RoleBinding
  metadata:
    name: leader-locking-nfs-provisioner
  subjects:
    - kind: ServiceAccount
      name: nfs-provisioner
      # replace with namespace where provisioner is deployed
      namespace: "${NAMESPACE}"
  roleRef:
    kind: Role
    name: leader-locking-nfs-provisioner
    apiGroup: rbac.authorization.k8s.io
- apiVersion: v1
  kind: SecurityContextConstraints
  metadata:
    annotations: null
    name: nfs-provisioner
  allowHostDirVolumePlugin: true
  allowHostIPC: false
  allowHostNetwork: false
  allowHostPID: false
  allowHostPorts: false
  allowPrivilegedContainer: false
  allowedCapabilities:
  - DAC_READ_SEARCH
  - SYS_RESOURCE
  defaultAddCapabilities: null
  fsGroup:
    type: MustRunAs
  priority: null
  readOnlyRootFilesystem: false
  requiredDropCapabilities:
  - KILL
  - MKNOD
  - SYS_CHROOT
  runAsUser:
    type: RunAsAny
  seLinuxContext:
    type: MustRunAs
  supplementalGroups:
    type: RunAsAny
  volumes:
  - configMap
  - downwardAPI
  - emptyDir
  - persistentVolumeClaim
  - secret
  - hostPath
- apiVersion: v1
  kind: Service
  metadata:
    name: nfs-provisioner
    labels:
      app: nfs-provisioner
  spec:
    ports:
      - name: nfs
        port: 2049
      - name: mountd
        port: 20048
      - name: rpcbind
        port: 111
      - name: rpcbind-udp
        port: 111
        protocol: UDP
    selector:
      app: nfs-provisioner
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    name: nfs-provisioner
  spec:
    selector:
      matchLabels:
        app: nfs-provisioner
    replicas: 1
    strategy:
      type: Recreate 
    template:
      metadata:
        labels:
          app: nfs-provisioner
      spec:
        nodeSelector:
          app: nfs-provisioner
        serviceAccount: nfs-provisioner
        containers:
          - name: nfs-provisioner
            image: quay.io/kubernetes_incubator/nfs-provisioner:latest
            ports:
              - name: nfs
                containerPort: 2049
              - name: mountd
                containerPort: 20048
              - name: rpcbind
                containerPort: 111
              - name: rpcbind-udp
                containerPort: 111
                protocol: UDP
            securityContext:
              capabilities:
                add:
                  - DAC_READ_SEARCH
                  - SYS_RESOURCE
            args:
              - "-provisioner=example.com/nfs"
            env:
              - name: POD_IP
                valueFrom:
                  fieldRef:
                    fieldPath: status.podIP
              - name: SERVICE_NAME
                value: nfs-provisioner
              - name: POD_NAMESPACE
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.namespace
            imagePullPolicy: "IfNotPresent"
            volumeMounts:
              - name: export-volume
                mountPath: "${NFS_PATH}"
        volumes:
          - name: export-volume
            hostPath:
              path: "${HOST_PATH}"
parameters:
- displayName: Namespace
  name: NAMESPACE
  required: true
  value: nfs-provisioner
- displayName: NFS_PATH
  name: NFS_PATH
  required: true
  value: "/export"
- displayName: NFS_SERVER
  name: HOST_PATH
  required: true
  value: "/exports-nfs"

