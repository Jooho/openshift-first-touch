apiVersion: v1
kind: Template
labels:
  template: nfs-client-provisioner
message: deploy nfs provisioner client 
metadata:
  annotations:
    description: This provide nfs-provisioner 
    iconClass: icon-nfs-provisioner
    tags: nfs
  name: nfs-clinet-provisioner
objects:
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: nfs-client-provisioner
- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: ClusterRole
  metadata:
    name: nfs-client-provisioner-runner
  rules:
    - apiGroups: [""]
      resources: ["persistentvolumes"]
      verbs: ["get", "list", "watch", "create", "delete"]
    - apiGroups: [""]
      resources: ["persistentvolumeclaims"]
      verbs: ["get", "list", "watch", "update"]
    - apiGroups: ["storage.k8s.io"]
      resources: ["storageclasses"]
      verbs: ["get", "list", "watch"]
    - apiGroups: [""]
      resources: ["events"]
      verbs: ["create", "update", "patch"]
- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: ClusterRoleBinding
  metadata:
    name: run-nfs-client-provisioner
  subjects:
    - kind: ServiceAccount
      name: nfs-client-provisioner
      namespace: "${NAMESPACE}"
  roleRef:
    kind: ClusterRole
    name: nfs-client-provisioner-runner
    apiGroup: rbac.authorization.k8s.io
- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: Role
  metadata:
    name: leader-locking-nfs-client-provisioner
  rules:
    - apiGroups: [""]
      resources: ["endpoints"]
      verbs: ["get", "list", "watch", "create", "update", "patch"]
- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: RoleBinding
  metadata:
    name: leader-locking-nfs-client-provisioner
  subjects:
    - kind: ServiceAccount
      name: nfs-client-provisioner
      # replace with namespace where provisioner is deployed
      namespace: "${NAMESPACE}"
  roleRef:
    kind: Role
    name: leader-locking-nfs-client-provisioner
    apiGroup: rbac.authorization.k8s.io
  
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    name: nfs-client-provisioner
  spec:
    replicas: 1
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: nfs-client-provisioner
      spec:
        serviceAccountName: nfs-client-provisioner
        containers:
          - name: nfs-client-provisioner
            image: quay.io/external_storage/nfs-client-provisioner:latest
            volumeMounts:
              - name: nfs-client-root
                mountPath: /persistentvolumes
            env:
              - name: PROVISIONER_NAME
                value: fuseim.pri/ifs
              - name: NFS_SERVER
                value: dhcp182-21.gsslab.rdu2.redhat.com
              - name: NFS_PATH
                value: /exports-nfs
        volumes:
          - name: nfs-client-root
            nfs:
              server: "${NFS_SERVER}"
              path: "${NFS_PATH}"
- apiVersion: storage.k8s.io/v1
  kind: StorageClass
  metadata:
    annotations:
      storageclass.kubernetes.io/is-default-class: "true"
    name: managed-nfs-storage
  provisioner: fuseim.pri/ifs # or choose another name, must match deployment's env PROVISIONER_NAME'
  parameters:
    archiveOnDelete: "false"
parameters:
- displayName: Namespace
  name: NAMESPACE
  required: true
  value: nfs-provisioner-client
- displayName: NFS_PATH
  name: NFS_PATH
  required: true
  value: "/exports"
- displayName: NFS_SERVER
  name: NFS_SERVER
  required: true
  value: "example.com"

